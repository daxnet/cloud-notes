@using CloudNotes.Web.Models
@using System.Text.Json.Nodes
@using System.Text.Json.Serialization
@using System.Text.Json
@inject IConfiguration Configuration
@inject IHttpClientFactory ClientFactory

<div class="row p-2">
    <div class="col-12">
        <div class="d-grid gap-2">
            <button type="button" class="btn btn-primary btn-sm"><Icon Name="IconName.PencilSquare" /> 创建新的笔记</button>
        </div>
    </div>
</div>
<div class="row p-2">
    <div class="col-12">
        @if (_notes?.Length > 0)
        {
            <NoteListComponent Notes="_notes"></NoteListComponent>
        }
    </div>
</div>
@if (_totalPages > 1)
{
    <div class="row">
        <div class="col-12 p-1">
            <Pagination ActivePageNumber="@_currentPage"
                        TotalPages="@_totalPages"
                        DisplayPages="5"
                        Size="PaginationSize.Small"
                        FirstLinkIcon="IconName.ChevronDoubleLeft"
                        PreviousLinkIcon="IconName.ChevronLeft"
                        NextLinkIcon="IconName.ChevronRight"
                        Alignment="Alignment.Center"
                        LastLinkIcon="IconName.ChevronDoubleRight"
                        PageChanged="OnPageChanged"/>
        </div>
    </div>
}

@code {
    private NoteData[]? _notes;
    private const int PageSize = 15;
    private int _currentPage = 1;
    private int _totalPages = 0;

    [Inject] protected PreloadService? PreloadService { get; set; }

    public async Task ReloadAsync()
    {
        await ReadPagedNotesAsync(_currentPage);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await ReadPagedNotesAsync(1);
    }

    private async Task ReadPagedNotesAsync(int pageNumber)
    {
        try
        {
            PreloadService?.Show();
            var httpClient = ClientFactory.CreateClient("default");
            var httpResponseMessage = await httpClient.GetAsync($"notes?sortField=DateCreated&sortOrder=1&pageSize={PageSize}&pageNumber={pageNumber - 1}");
            httpResponseMessage.EnsureSuccessStatusCode();
            var responseJson = await httpResponseMessage.Content.ReadAsStringAsync();
            if (!string.IsNullOrEmpty(responseJson))
            {
                var responseObj = JsonNode.Parse(responseJson)?.AsObject();
                _totalPages = responseObj?["totalPages"]?.AsValue().GetValue<int>() ?? 0;
                var itemsJson = responseObj?["items"]?.ToJsonString() ?? "[]";
                _notes = JsonSerializer.Deserialize<NoteData[]>(itemsJson);
            }

            _currentPage = pageNumber;
        }
        finally
        {
            PreloadService?.Hide();
        }

    }

    private async Task OnPageChanged(int page)
    {
        _currentPage = page;
        await ReadPagedNotesAsync(page);
    }
}