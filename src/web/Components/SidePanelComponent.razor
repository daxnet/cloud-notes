@using CloudNotes.Web.Models
<div class="row p-2">
    <div class="col-12">
        <div class="d-grid gap-2">
            <button type="button" class="btn btn-primary">Create a new note</button>
        </div>
    </div>
</div>
<div class="row p-2">
    <div class="col-12">
        @if (_notes?.Length > 0)
        {
            <NoteListComponent Notes="_notes"></NoteListComponent>
        }
    </div>
</div>
@if (TotalPages > 1)
{
    <div class="row">
        <div class="col-12 p-1">
            <Pagination ActivePageNumber="@_currentPage"
                        TotalPages="@TotalPages"
                        DisplayPages="5"
                        Size="PaginationSize.Small"
                        FirstLinkIcon="IconName.ChevronDoubleLeft"
                        PreviousLinkIcon="IconName.ChevronLeft"
                        NextLinkIcon="IconName.ChevronRight"
                        Alignment="Alignment.Center"
                        LastLinkIcon="IconName.ChevronDoubleRight"
                        PageChanged="OnPageChanged"/>
        </div>
    </div>
}


@code {
    private NoteData[]? _notes;
    private const int PageSize = 15;
    private int _currentPage = 1;
    private static readonly NoteData[] AllNotes = new[]
    {
        new NoteData
        {
            Id = 1, Title = "This is a test note with a long title", Content = "Test note content", DateCreatedUtc = DateTime.UtcNow
        },
        new NoteData
        {
            Id = 2, Title = "This is another note", Content = "Another note content", DateCreatedUtc = DateTime.UtcNow.AddDays(-2), DateModifiedUtc = DateTime.UtcNow
        },
        new NoteData
        {
            Id = 3, Title = "This is the 3rd test note", Content = "This is the 3rd test note", DateCreatedUtc = DateTime.UtcNow
        },
        new NoteData
        {
            Id = 4, Title = "This is the forth test note", Content = "Note content", DateCreatedUtc = DateTime.UtcNow.AddDays(-6), DateModifiedUtc = DateTime.UtcNow
        },
        new NoteData
        {
            Id = 5, Title = "Fifth test note", Content = "Note content", DateCreatedUtc = DateTime.UtcNow
        },
        new NoteData
        {
            Id = 6, Title = "Sixth test note", Content = "Note content", DateCreatedUtc = DateTime.UtcNow.AddDays(-5), DateModifiedUtc = DateTime.UtcNow
        },new NoteData
        {
            Id = 7, Title = "Seventh test note", Content = "Note content", DateCreatedUtc = DateTime.UtcNow
        },
        new NoteData
        {
            Id = 8, Title = "Eighth test note", Content = "Note content", DateCreatedUtc = DateTime.UtcNow.AddDays(-4), DateModifiedUtc = DateTime.UtcNow
        },
        new NoteData
        {
            Id = 9, Title = "The nineth", Content = "Note content", DateCreatedUtc = DateTime.UtcNow
        },
        new NoteData
        {
            Id = 10, Title = "Last test note", Content = "Note content", DateCreatedUtc = DateTime.UtcNow.AddDays(-3), DateModifiedUtc = DateTime.UtcNow
        }
    };

    protected override async Task OnInitializedAsync()
    {
        await ReadPagedNotesAsync(1);
    }

    private async Task ReadPagedNotesAsync(int pageNumber)
    {
        _currentPage = pageNumber;
        var skip = (pageNumber - 1) * PageSize;
        _notes = AllNotes.Skip(skip).Take(PageSize).ToArray();
        await Task.Yield();
    }

    private int TotalPages => (int)Math.Ceiling(AllNotes.Length * 1.0 / PageSize);

    private async Task OnPageChanged(int page)
    {
        _currentPage = page;
        await ReadPagedNotesAsync(page);
    }

}