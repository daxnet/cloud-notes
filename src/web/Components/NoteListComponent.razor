<div class="row p-2">
    <div class="col-12">
        <div class="d-grid gap-2">
            <button type="button" class="btn btn-primary">Create a new note</button>
        </div>
    </div>
</div>
<div class="row p-2">
    <div class="col-12">
        @if (_notes?.Length > 0)
        {
            <ul class="list-group">
                @foreach (var note in _notes)
                {
                    <a href="#" class="list-group-item list-group-item-action" aria-current="true">
                        <div class="d-flex w-100 justify-content-between">
                            <h5 class="mb-1">@note.Title</h5>
                            @* <small>@note.DateCreatedUtc.ToLocalTime()</small> *@
                        </div>
                        <p class="mb-1">@note.Content</p>
                        @if (note.DateModifiedUtc.HasValue)
                        {
                            <small>@note.DateModifiedUtc.Value.ToLocalTime()</small>
                        }
                    </a>
                }
            </ul>
        }
    </div>
</div>
<div class="row">
    <div class="col-12 p-1">
        <Pagination ActivePageNumber="1"
                    TotalPages="15"
                    DisplayPages="5"
                    Size="PaginationSize.Small"
                    FirstLinkIcon="IconName.ChevronDoubleLeft"
                    PreviousLinkIcon="IconName.ChevronLeft"
                    NextLinkIcon="IconName.ChevronRight"
                    Alignment="Alignment.Center"
                    LastLinkIcon="IconName.ChevronDoubleRight"/>
    </div>
</div>


@code {

    private NoteData[]? _notes = new[]
    {
        new NoteData
        {
            Id = 1, Title = "This is a test note with a long title", Content = "Test note content", DateCreatedUtc = DateTime.UtcNow
        },
        new NoteData
        {
            Id = 2, Title = "This is another note", Content = "Another note content", DateCreatedUtc = DateTime.UtcNow.AddDays(-1), DateModifiedUtc = DateTime.UtcNow
        }
    };

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    class NoteData
    {
        public int Id { get; set; }
        public string? Title { get; set; }
        public string? Content { get; set; }
        public DateTime DateCreatedUtc { get; set; }
        public DateTime? DateModifiedUtc { get; set; }
    }

}